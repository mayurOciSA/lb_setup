Rule Sets are applied first in the request processing flow, followed by Routing Policies, and then Path Route Sets if no match is found in the Routing Policy

---


When using a Rule Set of type "URL Redirect Rules" in OCI Load Balancer, the process does not restart from the listener selection. Instead, the following occurs:

1. The load balancer receives the initial request and processes it through the configured Rule Set.

2. When a URL Redirect Rule is matched, the load balancer immediately sends a response to the client with the appropriate 3XX status code (typically 301 for permanent redirects or 302 for temporary redirects) and the new Location header[1][2].

3. The load balancer does not forward this request to any backend servers or process it further through other routing mechanisms like Routing Policies or Path Route Sets.

4. The client (usually a web browser) receives the 3XX response and automatically initiates a new request to the URL specified in the Location header[2].

5. This new request from the client is treated as an entirely separate request, which may or may not come back to the same load balancer, depending on the redirect URL.

It's important to note that:

- The redirect happens at the load balancer level, without involving backend servers[1].
- The new request generated by the client in response to the redirect is a separate transaction and will go through the entire request processing flow again if it reaches the load balancer[2].

For example, if you configure an HTTP to HTTPS redirect:

1. The client sends an HTTP request to the load balancer.
2. The load balancer's URL Redirect Rule sends back a 301 or 302 response with the HTTPS URL.
3. The client's browser automatically sends a new HTTPS request.
4. This new HTTPS request is processed as a fresh request by the load balancer[1][2].

This behavior allows for efficient handling of redirects directly at the load balancer level, improving performance and reducing unnecessary load on backend servers.

Citations:
[1] https://www.ateam-oracle.com/post/oci-load-balancer-url-redirect-configuration-a-best-practice
[2] https://blogs.oracle.com/cloud-infrastructure/post/http-url-redirect-on-oracle-cloud-infrastructure
[3] https://docs.public.oneportal.content.oci.oraclecloud.com/en-us/iaas/Content/Balance/Tasks/managingrulesets.htm


echo \"200.200 hs2.free.com\" >> /etc/hosts

resource "null_resource" "add_host_entry_hs2" {
  triggers = {
    always_run = "${timestamp()}"
  }

  provisioner "local-exec" {
    command = "sudo sh -c 'echo \"${oci_load_balancer.lb.ip_addresses[0].ip_address} ${oci_load_balancer_hostname.hs2}\" >> /etc/hosts '"
    when    = create
  }
}

resource "null_resource" "remove_host_entry_hs2" {
  triggers = {
    always_run = "${timestamp()}"
  }

  provisioner "local-exec" {
     command = "sudo sed -i '' '$d' /etc/hosts"    
     when    = destroy
  }
}

if 'verify_peer_certificate=false', the value or presence of verify_depth is NO-OP

mTLS is only supported with LB managed certificates. 
Seems to be the case atleast on the UI.


certificate_name is 
for LB managed CA bundle(s) only. 
And it only contains one or more certificate chains. 
And each such chain contain Root CA cert and may be intermediate CA certs of that chains.

https://registry.terraform.io/providers/oracle/oci/latest/docs/resources/load_balancer_certificate
when root ca is used?
why everything is optional including main certs?
how can pvt key be optional?



curl --location 'https://hs2.free.com/get' \
--header 'Host: hs1.free.com' \
--header 'User-Agent: mobile' \
--cacert ./certsdir/root_ca_server.pem


$ curl --cert client.crt --key client.key --cacert ca.crt https://myserver.internal.net:443

curl -v  --cert ./certsdir/client_hs3.pem:./certsdir/intermediate_ca_client.pem --key ./certsdir/client_hs3_key.pem --cacert ./certsdir/

curl  --cert ./certsdir/client_hs3.pem:./certsdir/intermediate_ca_client.pem --key ./certsdir/client_hs3_key.pem --cacert ./certsdir/root_ca_server.pem https://hs3.free.com:443/get | jq

openssl verify -verbose -CAfile ./certsdir/root_ca_client.pem -untrusted ./certsdir/intermediate_ca_client.pem ./certsdir/client_hs3.pem 

openssl verify -trusted ./certsdir/root_ca_client.pem -untrusted ./certsdir/intermediate_ca_client.pem ./certsdir/client_hs3.pem 

openssl verify -trusted ./certsdir/root_ca_server.pem -untrusted ./certsdir/intermediate_ca_server.pem ./certsdir/server_hs3.pem 